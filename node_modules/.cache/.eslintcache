[{"/Users/cassiusreynolds/Desktop/coding/freecodecamp/react/certificationProjects/randomQuoteGen/random-quote-gen/src/index.js":"1","/Users/cassiusreynolds/Desktop/coding/freecodecamp/react/certificationProjects/randomQuoteGen/random-quote-gen/src/App.js":"2","/Users/cassiusreynolds/Desktop/coding/freecodecamp/react/certificationProjects/randomQuoteGen/random-quote-gen/src/Redux/Store.js":"3","/Users/cassiusreynolds/Desktop/coding/freecodecamp/react/certificationProjects/randomQuoteGen/random-quote-gen/src/components/SearchPage/SearchQuotes.js":"4","/Users/cassiusreynolds/Desktop/coding/freecodecamp/react/certificationProjects/randomQuoteGen/random-quote-gen/src/Redux/Action.js":"5","/Users/cassiusreynolds/Desktop/coding/freecodecamp/react/certificationProjects/randomQuoteGen/random-quote-gen/src/components/MainPage/Card.js":"6","/Users/cassiusreynolds/Desktop/coding/freecodecamp/react/certificationProjects/randomQuoteGen/random-quote-gen/src/Redux/Reducers.js":"7","/Users/cassiusreynolds/Desktop/coding/freecodecamp/react/certificationProjects/randomQuoteGen/random-quote-gen/src/filteredQuotes.js":"8","/Users/cassiusreynolds/Desktop/coding/freecodecamp/react/certificationProjects/randomQuoteGen/random-quote-gen/src/components/SearchPage/CardInfo.js":"9","/Users/cassiusreynolds/Desktop/coding/freecodecamp/react/certificationProjects/randomQuoteGen/random-quote-gen/src/ErrorBoundary.js":"10","/Users/cassiusreynolds/Desktop/coding/freecodecamp/react/certificationProjects/randomQuoteGen/random-quote-gen/src/components/MainPage/Buttons.js":"11","/Users/cassiusreynolds/Desktop/coding/freecodecamp/react/certificationProjects/randomQuoteGen/random-quote-gen/src/components/MainPage/Text.js":"12"},{"size":839,"mtime":1692998372740,"results":"13","hashOfConfig":"14"},{"size":3985,"mtime":1692987992259,"results":"15","hashOfConfig":"14"},{"size":211,"mtime":1690000670392,"results":"16","hashOfConfig":"14"},{"size":12253,"mtime":1692987983431,"results":"17","hashOfConfig":"14"},{"size":1347,"mtime":1692985664947,"results":"18","hashOfConfig":"14"},{"size":443,"mtime":1692962502341,"results":"19","hashOfConfig":"14"},{"size":1581,"mtime":1692962602691,"results":"20","hashOfConfig":"14"},{"size":969,"mtime":1692997638759,"results":"21","hashOfConfig":"14"},{"size":2782,"mtime":1692988062490,"results":"22","hashOfConfig":"14"},{"size":542,"mtime":1691040248918,"results":"23","hashOfConfig":"14"},{"size":3922,"mtime":1692962769916,"results":"24","hashOfConfig":"14"},{"size":2871,"mtime":1692962625241,"results":"25","hashOfConfig":"14"},{"filePath":"26","messages":"27","suppressedMessages":"28","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"qcwrp1",{"filePath":"29","messages":"30","suppressedMessages":"31","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"32"},{"filePath":"33","messages":"34","suppressedMessages":"35","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"36","messages":"37","suppressedMessages":"38","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"39"},{"filePath":"40","messages":"41","suppressedMessages":"42","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"43","messages":"44","suppressedMessages":"45","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"46"},{"filePath":"47","messages":"48","suppressedMessages":"49","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"50","messages":"51","suppressedMessages":"52","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"53"},{"filePath":"54","messages":"55","suppressedMessages":"56","errorCount":0,"fatalErrorCount":0,"warningCount":12,"fixableErrorCount":0,"fixableWarningCount":0,"source":"57"},{"filePath":"58","messages":"59","suppressedMessages":"60","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"61"},{"filePath":"62","messages":"63","suppressedMessages":"64","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"65"},{"filePath":"66","messages":"67","suppressedMessages":"68","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"69"},"/Users/cassiusreynolds/Desktop/coding/freecodecamp/react/certificationProjects/randomQuoteGen/random-quote-gen/src/index.js",[],[],"/Users/cassiusreynolds/Desktop/coding/freecodecamp/react/certificationProjects/randomQuoteGen/random-quote-gen/src/App.js",["70","71"],[],"import React, { useEffect } from \"react\";\nimport Card from \"./components/MainPage/Card\";\n// MAINLY STYLED WITH TACHYONS\nimport tachyons from \"tachyons\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport \"./App.css\";\nimport { Link } from \"react-router-dom\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { faMoon, faSun } from \"@fortawesome/free-solid-svg-icons\";\nimport { goLightMode, goDarkMode } from \"./Redux/Action\";\nimport { shorterQuotes } from \"./filteredQuotes\";\n\nfunction App() {\n  useEffect(() => {\n    console.log(shorterQuotes);\n  }, []);\n\n  // I did not export bc of getter vs setter error when using logic for changing array colors in dark mode\n  let colors = [\n    \"#d61a1a\",\n    \"#21d214\",\n    \"#FF6633\",\n    \"#0ed6d3\",\n    \"#ba9a2f\",\n    \"#3369ff\",\n    \"#60514c\",\n    \"#32724f\",\n    \"#c91ead\",\n    \"#d82b6b\",\n    \"#3029fb\",\n    \"#657077\",\n    \"#99de3f\",\n    \"#b433ff\",\n    \"#590e0e\",\n    \"#131142\",\n  ];\n  let colors2 = [\n    \"#d61a1a\",\n    \"#21d214\",\n    \"#FF6633\",\n    \"#0ed6d3\",\n    \"#ba9a2f\",\n    \"#3369ff\",\n    \"#c9a89d\",\n    \"#4eba7f\",\n    \"#c91ead\",\n    \"#d82b6b\",\n    \"#9894f7\",\n    \"#98aab5\",\n    \"#99de3f\",\n    \"#9d48cf\",\n    \"#ff94b0\",\n    \"#FFF\",\n  ];\n  const dispatch = useDispatch();\n\n  // useSelectors\n  const newColorState = useSelector((state) => state.color);\n  const lightMode = useSelector((state) => state.light);\n\n  // base set up for light mode vs dark mode toggle\n  lightMode\n    ? (document.body.style.backgroundColor = \"whitesmoke\")\n    : (document.body.style.backgroundColor = \"rgb(32, 32, 32)\");\n\n  lightMode ? (colors = colors) : (colors = colors2);\n\n  return (\n    <div className=\"main-container\">\n      <div className=\"dark-light tc mb4 mt3\">\n        {/* // /////////////////////////////// */}\n        {/* lightmode vs darkmode toggle */}\n        {/* { // ///////////////////////////////} */}\n        {lightMode ? (\n          <FontAwesomeIcon\n            className=\"\"\n            style={{\n              color: colors[newColorState],\n              cursor: \"pointer\",\n              transition: \"all .5s ease-in-out\",\n            }}\n            icon={faMoon}\n            size=\"2x\"\n            onClick={() => {\n              dispatch(goDarkMode());\n            }}\n          />\n        ) : (\n          <FontAwesomeIcon\n            className=\"\"\n            style={{\n              color: colors[newColorState],\n              cursor: \"pointer\",\n              transition: \"all .5s ease-in-out\",\n            }}\n            icon={faSun}\n            size=\"2x\"\n            onClick={() => {\n              dispatch(goLightMode());\n            }}\n          />\n        )}\n      </div>\n      {/* // /////////////////////////////// */}\n      {/* link to search page */}\n      {/* // /////////////////////////////// */}\n      <Link to=\"/search\">\n        <a\n          target=\"_blank\"\n          id=\"search-quote\"\n          style={{\n            color: colors[newColorState],\n            transition: \"all .5s ease-in-out\",\n          }}\n          className=\"f6 link dim ba bw2 ph3 pv2 mb3 dib\"\n          href=\"#0\"\n        >\n          Search For Quotes\n        </a>\n      </Link>\n      <div\n        style={{\n          border: `2px solid ${colors[newColorState]}`,\n          transition: \"all .5s ease-in-out\",\n        }}\n        className=\"App tc\"\n      >\n        {/* // /////////////////////////////// */}\n        {/* main content in Card Component */}\n        {/* // /////////////////////////////// */}\n        <Card />\n      </div>\n      <footer\n        style={{\n          color: `${colors[newColorState]}`,\n          transition: \"all .5s ease-in-out\",\n        }}\n        className=\" tc ma5\"\n      >\n        Developed By{\" \"}\n        <a\n          style={{\n            color: `${colors[newColorState]}`,\n            transition: \"all .5s ease-in-out\",\n          }}\n          href=\"https://github.com/cassius2828\"\n        >\n          Cassius Reynolds{\" \"}\n        </a>\n      </footer>\n    </div>\n  );\n}\n\nexport default App;\n","/Users/cassiusreynolds/Desktop/coding/freecodecamp/react/certificationProjects/randomQuoteGen/random-quote-gen/src/Redux/Store.js",[],[],"/Users/cassiusreynolds/Desktop/coding/freecodecamp/react/certificationProjects/randomQuoteGen/random-quote-gen/src/components/SearchPage/SearchQuotes.js",["72","73","74"],[],"import tachyons from \"tachyons\";\nimport { CardInfo } from \"./CardInfo\";\nimport ErrorBoundry from \"../../ErrorBoundary\";\nimport \"../../search.css\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { useEffect, useState } from \"react\";\nimport { shorterQuotes, categories } from \"../../filteredQuotes\";\nimport InfiniteScroll from \"react-infinite-scroll-component\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport {\n  faArrowAltCircleUp,\n  faMoon,\n  faSun,\n  faHome,\n} from \"@fortawesome/free-solid-svg-icons\";\nimport { goDarkMode, goLightMode } from \"../../Redux/Action\";\nimport { Link } from \"react-router-dom\";\n\n//////////////////////////////////////////////////\n//////////////////////////////////////////////////\n//////////////////////////////////////////////////\n\nexport const SearchQuotes = () => {\n  const [category, setCategory] = useState(\"\");\n  // I did not export bc of getter vs setter error when using logic for changing array colors in dark mode\n  let colors = [\n    \"#d61a1a\",\n    \"#21d214\",\n    \"#FF6633\",\n    \"#0ed6d3\",\n    \"#ba9a2f\",\n    \"#3369ff\",\n    \"#60514c\",\n    \"#32724f\",\n    \"#c91ead\",\n    \"#d82b6b\",\n    \"#3029fb\",\n    \"#657077\",\n    \"#99de3f\",\n    \"#b433ff\",\n    \"#590e0e\",\n    \"#131142\",\n  ];\n  let colors2 = [\n    \"#d61a1a\",\n    \"#21d214\",\n    \"#FF6633\",\n    \"#0ed6d3\",\n    \"#ba9a2f\",\n    \"#3369ff\",\n    \"#c9a89d\",\n    \"#4eba7f\",\n    \"#c91ead\",\n    \"#d82b6b\",\n    \"#9894f7\",\n    \"#98aab5\",\n    \"#99de3f\",\n    \"#9d48cf\",\n    \"#ff94b0\",\n    \"#FFF\",\n  ];\n\n  //////////////////////////////////////////////////\n  // base set up for light mode vs dark mode toggle\n  const lightMode = useSelector((state) => state.light);\n\n  lightMode\n    ? (document.body.style.backgroundColor = \"white\")\n    : (document.body.style.backgroundColor = \"rgb(32, 32, 32)\");\n\n  lightMode ? (colors = colors) : (colors = colors2);\n\n  // base set up for light mode vs dark mode toggle\n  //////////////////////////////////////////////////\n\n  const dispatch = useDispatch();\n\n  // global and local state\n  const newColorState = useSelector((state) => state.color);\n  const [search, setSearch] = useState(\"\");\n  const [filteredResults, setFilteredResults] = useState([]);\n  const [dblFiltered, setDblFiltered] = useState([]);\n  const [searchToggle, setSearchToggle] = useState(false);\n\n  // ///////////////////////////////\n  // * filters quotes in drop down\n  // ///////////////////////////////\n  const customIncludes = (obj, property, value) => {\n    if (!obj.hasOwnProperty(property)) {\n      return false;\n    }\n    if (Array.isArray(obj[property])) {\n      if (obj[property].includes(value)) {\n        return true;\n      } else if (obj[property] === value) {\n        return true;\n      } else {\n        return false;\n      }\n    }\n  };\n\n  const filterWrapper = (arrayOfObjects, key, value) => {\n    return arrayOfObjects.filter((obj) => {\n      return customIncludes(obj, key, value);\n    });\n  };\n  const updatedList = filterWrapper(shorterQuotes, \"tags\", category);\n\n  // ///////////////////////////////\n  // search functionality\n  // ///////////////////////////////\n  const searchQuotes = (searchValue) => {\n    setSearch(searchValue);\n    if (search !== \"\") {\n      const filteredData = shorterQuotes.filter((item) => {\n        return Object.values(item)\n          .join(\" \")\n          .toLocaleLowerCase()\n          .includes(search.toLocaleLowerCase());\n      });\n      setFilteredResults(filteredData);\n    } else {\n      setFilteredResults(shorterQuotes);\n    }\n  };\n\n  // ///////////////////////////////\n  // searches through already categorized quotes\n  // ///////////////////////////////\n  const searchCategoryQuotes = (searchValue) => {\n    setSearch(searchValue);\n    if (search !== \"\") {\n      const filteredData = updatedList.filter((item) => {\n        return Object.values(item)\n          .join(\" \")\n          .toLocaleLowerCase()\n          .includes(search.toLocaleLowerCase());\n      });\n      setDblFiltered(filteredData);\n    } else {\n      setDblFiltered(updatedList);\n    }\n  };\n\n  // ///////////////////////////////\n  // updates category state\n  // ///////////////////////////////\n  const handleCategoryChange = () => {\n    const select = document.getElementById(\"dropdown-filter\").value;\n    setCategory(select);\n  };\n\n  // ///////////////////////////////\n  // alternates search bars to search through the correct lists\n  // ///////////////////////////////\n  useEffect(() => {\n    handleCategoryChange();\n    if (category !== \"\") {\n      setSearchToggle(false);\n    } else {\n      setSearchToggle(true);\n    }\n    console.log(category);\n  }, [category]);\n\n  // ///////////////////////////////\n  // get width of window for placeholder text\n  // ///////////////////////////////\n  const windowWidth = window.innerWidth;\n  const resetZoom = () => {\n    window.document.body.style.zoom = 1;\n    console.log(\"hi\");\n  };\n\n  // //////////////////\n  // ! START OF RETURN\n  // //////////////////\n  return (\n    <div\n      // onClick={() => window.document.body.style.zoom = 1}\n      className=\"search-container tc\"\n    >\n      <>\n        <div className=\"search-icon-container mb4\">\n          <Link to=\"/\">\n            <FontAwesomeIcon\n              className=\"search-icon\"\n              icon={faHome}\n              size=\"2x\"\n              style={{\n                color: colors[newColorState],\n                transition: \"all .5s ease-in-out\",\n              }}\n            />\n          </Link>\n\n          {lightMode ? (\n            <FontAwesomeIcon\n              className=\"search-icon\"\n              style={{\n                color: colors[newColorState],\n                transition: \"all .5s ease-in-out\",\n                cursor: \"pointer\",\n              }}\n              icon={faMoon}\n              size=\"2x\"\n              onClick={() => {\n                dispatch(goDarkMode());\n              }}\n            />\n          ) : (\n            <FontAwesomeIcon\n              className=\"search-icon\"\n              style={{\n                color: colors[newColorState],\n                cursor: \"pointer\",\n                transition: \"all .5s ease-in-out\",\n              }}\n              icon={faSun}\n              size=\"2x\"\n              onClick={() => {\n                dispatch(goLightMode());\n              }}\n            />\n          )}\n\n          <a href=\"#back-to-top\">\n            <FontAwesomeIcon\n              className=\"back-to-top search-icon\"\n              icon={faArrowAltCircleUp}\n              size=\"2x\"\n              style={{\n                color: colors[newColorState],\n                transition: \"all .5s ease-in-out\",\n              }}\n            />\n          </a>\n        </div>\n\n        <div className=\"filter-container\">\n          {/* switching the search toggle value worked! lets go */}\n          {!searchToggle ? (\n            // dbl search\n            <input\n              style={{\n                color: lightMode ? colors[newColorState] : \"whitesmoke\",\n                border: `solid 4px ${colors[newColorState]}`,\n                backgroundColor: `transparent`,\n              }}\n              onChange={(e) => searchCategoryQuotes(e.target.value)}\n              className=\"search-page-input\"\n              type=\"search\"\n              placeholder={\n                windowWidth > 425 ? `search for quotes...` : `search`\n              }\n            />\n          ) : (\n            // single search\n            <input\n              style={{\n                color: lightMode ? colors[newColorState] : \"whitesmoke\",\n                border: `solid 4px ${colors[newColorState]}`,\n                backgroundColor: `transparent`,\n              }}\n              onChange={(e) => searchQuotes(e.target.value)}\n              className=\"search-page-input\"\n              type=\"search\"\n              placeholder={\n                windowWidth > 425 ? `search for quotes...` : `search`\n              }\n            />\n          )}\n          <select\n            className=\"search-page-input\"\n            style={{\n              border: `solid 4px ${colors[newColorState]}`,\n              color: lightMode ? colors[newColorState] : \"whitesmoke\",\n            }}\n            onChange={handleCategoryChange}\n            id=\"dropdown-filter\"\n          >\n            <option key=\"blank\"></option>\n            {categories.map((item) => {\n              return <option key={item}>{item}</option>;\n            })}\n          </select>\n        </div>\n\n        <ErrorBoundry>\n          <InfiniteScroll\n            className=\"infinite-scroll mb4 mt4\"\n            dataLength={shorterQuotes.length}\n            hasMore={true}\n            height={620}\n          >\n            <div id=\"back-to-top\"></div>\n            <div className=\"card-containers\">\n              {\n                // ///////////////////////////////\n                // * if a category is selected and the search bar is active then\n                // * search filter thru the categorized list\n                // ///////////////////////////////\n                category !== \"\" && search.length > 0\n                  ? dblFiltered.map((item) => {\n                      return (\n                        <CardInfo\n                          cardId={item._id}\n                          key={item._id}\n                          quote={item.content}\n                          author={item.author}\n                          expand={false}\n                          number={item.quote}\n                          // onClick={grabCard1(item._id)}\n                        />\n                      );\n                    })\n                  : // ///////////////////////////////\n                  // * if a category is selected, filter by category\n                  // ///////////////////////////////\n                  category !== \"\"\n                  ? updatedList.map((item) => {\n                      return (\n                        <CardInfo\n                          cardId={item._id}\n                          key={item._id}\n                          quote={item.content}\n                          author={item.author}\n                          expand={false}\n                          number={item.quote}\n                          // onClick={grabCard1(item._id)}\n                        />\n                      );\n                    })\n                  : // ///////////////////////////////\n                  // * if no category is selected, filter by search\n                  // ///////////////////////////////\n                  search.length > 0\n                  ? filteredResults.map((item) => {\n                      return (\n                        <CardInfo\n                          cardId={item._id}\n                          key={item._id}\n                          quote={item.content}\n                          author={item.author}\n                          expand={false}\n                          number={item.quote}\n                          // onClick={grabCard1(item._id)}\n                        />\n                      );\n                    })\n                  : // ///////////////////////////////\n                    // * if none are true then return whole list\n                    // ///////////////////////////////\n                    shorterQuotes.map((item) => {\n                      return (\n                        <CardInfo\n                          cardId={item._id}\n                          key={item._id}\n                          quote={item.content}\n                          author={item.author}\n                          expand={false}\n                          number={item.quote}\n                        />\n                      );\n                    })\n              }\n            </div>\n          </InfiniteScroll>\n        </ErrorBoundry>\n        <footer\n          style={{\n            color: `${colors[newColorState]}`,\n            transition: \"all .5s ease-in-out\",\n          }}\n          className=\"tc ma5\"\n        >\n          Developed By{\" \"}\n          <a\n            style={{\n              color: `${colors[newColorState]}`,\n              transition: \"all .5s ease-in-out\",\n            }}\n            href=\"https://github.com/cassius2828\"\n            target=\"_blank\"\n            rel=\"noreferrer\"\n          >\n            Cassius Reynolds\n          </a>\n        </footer>\n      </>\n    </div>\n  );\n};\n","/Users/cassiusreynolds/Desktop/coding/freecodecamp/react/certificationProjects/randomQuoteGen/random-quote-gen/src/Redux/Action.js",[],[],"/Users/cassiusreynolds/Desktop/coding/freecodecamp/react/certificationProjects/randomQuoteGen/random-quote-gen/src/components/MainPage/Card.js",["75"],[],"// style imports\nimport tachyons from \"tachyons\";\nimport \"../../index.css\";\nimport \"../../App.css\";\n\n// component imports\nimport Text from \"./Text\";\nimport Buttons from \"./Buttons\";\nimport ErrorBoundry from \"../../ErrorBoundary\";\n\nexport default function Card() {\n  return (\n    <div className={`cardBase br3 flex-column center pa3 ${\"color\"}`}>\n      <ErrorBoundry>\n        <Text />\n        <Buttons />\n      </ErrorBoundry>\n    </div>\n  );\n}","/Users/cassiusreynolds/Desktop/coding/freecodecamp/react/certificationProjects/randomQuoteGen/random-quote-gen/src/Redux/Reducers.js",[],[],"/Users/cassiusreynolds/Desktop/coding/freecodecamp/react/certificationProjects/randomQuoteGen/random-quote-gen/src/filteredQuotes.js",["76","77"],[],"import data from \"./quotes.json\";\n\n// removes duplicates\nconst unique = data.filter(\n  (obj, index) => data.findIndex((item) => item._id === obj._id) === index\n);\n\nexport let shorterQuotes = unique.filter((item) => {\n  if (item.content.length < 154) {\n    return item;\n  }\n});\n\n// obtained an index that will not reset based on filtered array\nlet count = 0;\nshorterQuotes = shorterQuotes.map((item, index) => {\n  return { ...item, quote: count++ };\n});\n\nexport const allTags = data.map((item) => {\n  return item.tags;\n});\n\nexport let flatArr = [].concat(...allTags);\n\n  // ///////////////////////////////\n  // * Finally have filtered list of categories\n  // ///////////////////////////////\nexport const filteredTags = flatArr.filter(\n  (obj, index) => flatArr.findIndex((item) => item === obj) === index\n);\n\nexport const categories = filteredTags.sort(function (a, b) {\n  a = a.toLowerCase();\n  b = b.toLowerCase();\n  if (a == b) return 0;\n  return a < b ? -1 : 1;\n});\n","/Users/cassiusreynolds/Desktop/coding/freecodecamp/react/certificationProjects/randomQuoteGen/random-quote-gen/src/components/SearchPage/CardInfo.js",["78","79","80","81","82","83","84","85","86","87","88","89"],[],"import tachyons from \"tachyons\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { faQuoteLeft } from \"@fortawesome/free-solid-svg-icons\";\nimport \"../../index.css\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { useEffect, useState } from \"react\";\nimport { allTags, filteredTags, flatArr, categories} from \"../../filteredQuotes\";\nimport {all} from \"axios\";\nimport { shorterQuotes } from \"../../filteredQuotes\";\nimport {grabCard} from \"../../Redux/Action\";\n\nexport const CardInfo = ({\n  quote = \"lorem sample text that is what this is you already know it boi\",\n  author = \"lorem fait\",\n  number = \"unknown\",\n  onClick,\n  cardId\n}) => {\n  // I did not export bc of getter vs setter error when using logic for changing array colors in dark mode\n  let colors = [\n    \"#d61a1a\",\n    \"#21d214\",\n    \"#FF6633\",\n    \"#0ed6d3\",\n    \"#ba9a2f\",\n    \"#3369ff\",\n    \"#60514c\",\n    \"#32724f\",\n    \"#c91ead\",\n    \"#d82b6b\",\n    \"#3029fb\",\n    \"#657077\",\n    \"#99de3f\",\n    \"#b433ff\",\n    \"#590e0e\",\n    \"#131142\",\n  ];\n  let colors2 = [\n    \"#d61a1a\",\n    \"#21d214\",\n    \"#FF6633\",\n    \"#0ed6d3\",\n    \"#ba9a2f\",\n    \"#3369ff\",\n    \"#c9a89d\",\n    \"#4eba7f\",\n    \"#c91ead\",\n    \"#d82b6b\",\n    \"#9894f7\",\n    \"#98aab5\",\n    \"#99de3f\",\n    \"#9d48cf\",\n    \"#ff94b0\",\n    \"#FFF\",\n  ];\n  //////////////////////////////////////////////////\n\n\n  // const tagtest = () => {\n  //   console.log(categories);\n    \n  // }\n\n  \n  // useSelector\n  const lightMode = useSelector((state) => state.light);\n\n  // base set up for light mode vs dark mode toggle\n  lightMode ? (colors = colors) : (colors = colors2);\n  const newColorState = useSelector((state) => state.color);\n  //////////////////////////////////////////////////\n\n  return (\n    <>\n      <div\n      id={cardId}\n        style={{\n          color: colors[newColorState],\n          border: `solid 2px ${colors[newColorState]}`,\n        }}\n        className=\"quote-info-box tc mt3 pa3\"\n        // id=\"quote-info-box\"\n      >\n        <h5\n          style={{\n            color: colors[newColorState],\n            transition: \"all .5s ease-in-out\",\n          }}\n          className=\"mb3\"\n        >\n          <FontAwesomeIcon\n            style={{\n              color: colors[newColorState],\n              transition: \"all .5s ease-in-out\",\n            }}\n            icon={faQuoteLeft}\n          />\n          {quote}\n        </h5>\n        <p\n          style={{\n            color: colors[newColorState],\n            transition: \"all .5s ease-in-out\",\n          }}\n        >\n          - {author}\n        </p>\n        <p\n          style={{\n            color: colors[newColorState],\n            transition: \"all .5s ease-in-out\",\n          }}\n        >\n          Quote #{number + 1}\n        </p>\n      </div>\n    </>\n  );\n};\n","/Users/cassiusreynolds/Desktop/coding/freecodecamp/react/certificationProjects/randomQuoteGen/random-quote-gen/src/ErrorBoundary.js",["90"],[],"import React, { Component } from \"react\";\nimport { colors } from \"./components/MainPage/Buttons\";\n\nclass ErrorBoundry extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      hasError: false,\n    };\n  }\n\n  componentDidCatch(error, info) {\n    this.setState({ hasError: true });\n  }\n\n  render() {\n    return this.state.hasError ? (\n      <h1 style={{ color: \"#d61a1a\" }}> Oops! Refresh or click out to resume searching for quotes</h1>\n    ) : (\n      this.props.children\n    );\n  }\n}\n\nexport default ErrorBoundry;\n","/Users/cassiusreynolds/Desktop/coding/freecodecamp/react/certificationProjects/randomQuoteGen/random-quote-gen/src/components/MainPage/Buttons.js",["91","92"],[],"import tachyons from \"tachyons\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport {\n  faSquareTwitter,\n  faSquareTumblr,\n} from \"@fortawesome/free-brands-svg-icons\";\nimport {\n  faArrowAltCircleLeft,\n  faArrowAltCircleRight,\n} from \"@fortawesome/free-solid-svg-icons\";\nimport { useDispatch } from \"react-redux\";\nimport {\n  decrement,\n  decrementColor,\n  increment,\n  incrementColor,\n  newColor,\n  newQuote,\n} from \"../../Redux/Action\";\nimport { useSelector } from \"react-redux\";\nimport \"../../index.css\";\n\nconst Buttons = () => {\n  // I did not export bc of getter vs setter error when using logic for changing array colors in dark mode\n  let colors = [\n    \"#d61a1a\",\n    \"#21d214\",\n    \"#FF6633\",\n    \"#0ed6d3\",\n    \"#ba9a2f\",\n    \"#3369ff\",\n    \"#60514c\",\n    \"#32724f\",\n    \"#c91ead\",\n    \"#d82b6b\",\n    \"#3029fb\",\n    \"#657077\",\n    \"#99de3f\",\n    \"#b433ff\",\n    \"#590e0e\",\n    \"#131142\",\n  ];\n  let colors2 = [\n    \"#d61a1a\",\n    \"#21d214\",\n    \"#FF6633\",\n    \"#0ed6d3\",\n    \"#ba9a2f\",\n    \"#3369ff\",\n    \"#c9a89d\",\n    \"#4eba7f\",\n    \"#c91ead\",\n    \"#d82b6b\",\n    \"#9894f7\",\n    \"#98aab5\",\n    \"#99de3f\",\n    \"#9d48cf\",\n    \"#ff94b0\",\n    \"#FFF\",\n  ];\n  const dispatch = useDispatch();\n\n  // useSelectors\n  const newColorState = useSelector((state) => state.color);\n  const quoteState = useSelector((state) => state.quote);\n  const lightMode = useSelector((state) => state.light);\n\n  // base set up for light mode vs dark mode toggle\n  lightMode ? (colors = colors) : (colors = colors2);\n\n  return (\n    <div id=\"quote-box\" >\n      <a\n        id=\"new-quote\"\n        style={{\n          color: colors[newColorState],\n          transition: \"all .5s ease-in-out\",\n        }}\n        className=\"f6 link dim ba bw2 ph3 pv2 mb4 dib\"\n        href=\"#0\"\n        onClick={() => {\n          dispatch(newQuote());\n          dispatch(newColor());\n        }}\n      >\n        Random Quote\n      </a>\n      <div className=\"container\">\n        <a target=\"_blank\" id=\"tweet-quote\" href=\"twitter.com/intent/tweet\">\n          <FontAwesomeIcon\n            style={{\n              color: colors[newColorState],\n              transition: \"all .5s ease-in-out\",\n            }}\n            size=\"3x\"\n            className=\"icons mb3\"\n            icon={faSquareTwitter}\n          />\n        </a>\n        <a\n          target=\"_blank\"\n          href=\"https://www.tumblr.com/?redirect_to=%2F&source=login_wall\"\n          rel=\"noreferrer\"\n        >\n          <FontAwesomeIcon\n            style={{\n              color: colors[newColorState],\n              transition: \"all .5s ease-in-out\",\n            }}\n            size=\"3x\"\n            className=\"icons mb3\"\n            icon={faSquareTumblr}\n          />\n        </a>\n        <div className=\"arrow-container\">\n          <FontAwesomeIcon\n            style={{\n              color: colors[newColorState],\n              cursor: \"pointer\",\n              transition: \"all .5s ease-in-out\",\n            }}\n            onClick={() => {\n              dispatch(decrement());\n              dispatch(decrementColor());\n            }}\n            size=\"3x\"\n            className=\" arrow left ml2\"\n            icon={faArrowAltCircleLeft}\n          />\n          <p\n            className=\"mt2\"\n            style={{\n              color: colors[newColorState],\n              transition: \"all .5s ease-in-out\",\n            }}\n          >\n            Quote #{quoteState + 1}\n          </p>\n          <FontAwesomeIcon\n            style={{\n              color: colors[newColorState],\n              transition: \"all .5s ease-in-out\",\n              cursor: \"pointer\",\n            }}\n            onClick={() => {\n              dispatch(increment());\n              dispatch(incrementColor());\n            }}\n            size=\"3x\"\n            className=\" arrow right mr2\"\n            icon={faArrowAltCircleRight}\n          />\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default Buttons;\n","/Users/cassiusreynolds/Desktop/coding/freecodecamp/react/certificationProjects/randomQuoteGen/random-quote-gen/src/components/MainPage/Text.js",["93","94"],[],"import tachyons from \"tachyons\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { faQuoteLeft } from \"@fortawesome/free-solid-svg-icons\";\n// import axios from \"axios\";\n// import { useEffect, useState } from \"react\";\nimport { useSelector } from \"react-redux/es/hooks/useSelector\";\nimport { shorterQuotes } from \"../../filteredQuotes\";\n\n// exports\n\nconst Text = () => {\n  //! no longer using API bc the site is no longer active, instead I am using my\n  //! own data I compiled from outside sources\n  // const [quoteArr, setquoteArr] = useState([]);\n\n  // const fetchQuotes = async () => {\n  //   try {\n  //     const response = await axios.get(\"https://api.api-ninjas.com/v1/quotes\", {\n  //       headers: {\n  //         \"X-Api-Key\": 'AypqPfFMnmLnw8iuCXM3Lw==qaDeh3llghS570Fh',\n  //       },\n  //     });\n\n  //     setquoteArr(response.data);\n  //     console.log(response)\n  //   } catch (error) {\n  //     console.log(error);\n  //   }\n  // };\n\n  // useEffect(() => {\n  //   fetchQuotes();\n  // }, []);\n\n  const quoteArr = shorterQuotes;\n  // I did not export bc of getter vs setter error when using logic for changing array colors in dark mode\n  let colors = [\n    \"#d61a1a\",\n    \"#21d214\",\n    \"#FF6633\",\n    \"#0ed6d3\",\n    \"#ba9a2f\",\n    \"#3369ff\",\n    \"#60514c\",\n    \"#32724f\",\n    \"#c91ead\",\n    \"#d82b6b\",\n    \"#3029fb\",\n    \"#657077\",\n    \"#99de3f\",\n    \"#b433ff\",\n    \"#590e0e\",\n    \"#131142\",\n  ];\n  let colors2 = [\n    \"#d61a1a\",\n    \"#21d214\",\n    \"#FF6633\",\n    \"#0ed6d3\",\n    \"#ba9a2f\",\n    \"#3369ff\",\n    \"#c9a89d\",\n    \"#4eba7f\",\n    \"#c91ead\",\n    \"#d82b6b\",\n    \"#9894f7\",\n    \"#98aab5\",\n    \"#99de3f\",\n    \"#9d48cf\",\n    \"#ff94b0\",\n    \"#FFF\",\n  ];\n\n  // useSelectors\n  const lightMode = useSelector((state) => state.light);\n  const newQuoteState = useSelector((state) => state.quote);\n  const newColorState = useSelector((state) => state.color);\n  // base set up for light mode vs dark mode toggle\n\n  lightMode ? (colors = colors) : (colors = colors2);\n  return (\n    <>\n      {\" \"}\n      <div id=\"quote-box\">\n        <h2\n          className=\"mb3\"\n          id=\"text\"\n          style={{\n            color: colors[newColorState],\n            transition: \"all .5s ease-in-out\",\n          }}\n        >\n          <FontAwesomeIcon icon={faQuoteLeft} />\n          {quoteArr[312]\n            ? \" \" + quoteArr[newQuoteState].content\n            : \" *our api is having difficulties*\"}\n        </h2>\n        <p\n          className=\"mb3\"\n          id=\"author\"\n          style={{\n            color: colors[newColorState],\n            transition: \"all .5s ease-in-out\",\n          }}\n        >\n          -{\" \"}\n          {quoteArr[312]\n            ? quoteArr[newQuoteState].author\n              ? quoteArr[newQuoteState].author\n              : \"anonymous\"\n            : \" :(\"}\n        </p>\n      </div>\n    </>\n  );\n};\n\nexport default Text;\n",{"ruleId":"95","severity":1,"message":"96","line":4,"column":8,"nodeType":"97","messageId":"98","endLine":4,"endColumn":16},{"ruleId":"99","severity":1,"message":"100","line":66,"column":25,"nodeType":"97","messageId":"101","endLine":66,"endColumn":31},{"ruleId":"95","severity":1,"message":"96","line":1,"column":8,"nodeType":"97","messageId":"98","endLine":1,"endColumn":16},{"ruleId":"99","severity":1,"message":"100","line":71,"column":25,"nodeType":"97","messageId":"101","endLine":71,"endColumn":31},{"ruleId":"95","severity":1,"message":"102","line":171,"column":9,"nodeType":"97","messageId":"98","endLine":171,"endColumn":18},{"ruleId":"95","severity":1,"message":"96","line":2,"column":8,"nodeType":"97","messageId":"98","endLine":2,"endColumn":16},{"ruleId":"103","severity":1,"message":"104","line":8,"column":49,"nodeType":"105","messageId":"106","endLine":8,"endColumn":51},{"ruleId":"107","severity":1,"message":"108","line":36,"column":9,"nodeType":"109","messageId":"110","endLine":36,"endColumn":11},{"ruleId":"95","severity":1,"message":"96","line":1,"column":8,"nodeType":"97","messageId":"98","endLine":1,"endColumn":16},{"ruleId":"95","severity":1,"message":"111","line":5,"column":10,"nodeType":"97","messageId":"98","endLine":5,"endColumn":21},{"ruleId":"95","severity":1,"message":"112","line":6,"column":10,"nodeType":"97","messageId":"98","endLine":6,"endColumn":19},{"ruleId":"95","severity":1,"message":"113","line":6,"column":21,"nodeType":"97","messageId":"98","endLine":6,"endColumn":29},{"ruleId":"95","severity":1,"message":"114","line":7,"column":10,"nodeType":"97","messageId":"98","endLine":7,"endColumn":17},{"ruleId":"95","severity":1,"message":"115","line":7,"column":19,"nodeType":"97","messageId":"98","endLine":7,"endColumn":31},{"ruleId":"95","severity":1,"message":"116","line":7,"column":33,"nodeType":"97","messageId":"98","endLine":7,"endColumn":40},{"ruleId":"95","severity":1,"message":"117","line":7,"column":42,"nodeType":"97","messageId":"98","endLine":7,"endColumn":52},{"ruleId":"95","severity":1,"message":"118","line":8,"column":9,"nodeType":"97","messageId":"98","endLine":8,"endColumn":12},{"ruleId":"95","severity":1,"message":"119","line":9,"column":10,"nodeType":"97","messageId":"98","endLine":9,"endColumn":23},{"ruleId":"95","severity":1,"message":"120","line":10,"column":9,"nodeType":"97","messageId":"98","endLine":10,"endColumn":17},{"ruleId":"99","severity":1,"message":"100","line":69,"column":25,"nodeType":"97","messageId":"101","endLine":69,"endColumn":31},{"ruleId":"95","severity":1,"message":"121","line":2,"column":10,"nodeType":"97","messageId":"98","endLine":2,"endColumn":16},{"ruleId":"95","severity":1,"message":"96","line":1,"column":8,"nodeType":"97","messageId":"98","endLine":1,"endColumn":16},{"ruleId":"99","severity":1,"message":"100","line":69,"column":25,"nodeType":"97","messageId":"101","endLine":69,"endColumn":31},{"ruleId":"95","severity":1,"message":"96","line":1,"column":8,"nodeType":"97","messageId":"98","endLine":1,"endColumn":16},{"ruleId":"99","severity":1,"message":"100","line":80,"column":25,"nodeType":"97","messageId":"101","endLine":80,"endColumn":31},"no-unused-vars","'tachyons' is defined but never used.","Identifier","unusedVar","no-self-assign","'colors' is assigned to itself.","selfAssignment","'resetZoom' is assigned a value but never used.","array-callback-return","Array.prototype.filter() expects a value to be returned at the end of arrow function.","ArrowFunctionExpression","expectedAtEnd","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","'useDispatch' is defined but never used.","'useEffect' is defined but never used.","'useState' is defined but never used.","'allTags' is defined but never used.","'filteredTags' is defined but never used.","'flatArr' is defined but never used.","'categories' is defined but never used.","'all' is defined but never used.","'shorterQuotes' is defined but never used.","'grabCard' is defined but never used.","'colors' is defined but never used."]