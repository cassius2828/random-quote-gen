{"ast":null,"code":"var _jsxFileName = \"/Users/cassiusreynolds/Desktop/coding/freecodecamp/react/randomQuoteGen/random-quote-gen/src/Text.js\",\n  _s = $RefreshSig$();\nimport tachyons from \"tachyons\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { faQuoteLeft } from \"@fortawesome/free-solid-svg-icons\";\nimport axios from \"axios\";\nimport { useEffect, useState } from \"react\";\n\n// exports\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nexport const randomQuoteNum = Math.floor(Math.random() * 1643);\nexport default function Text() {\n  _s();\n  const [quote, setQuote] = useState(\"\");\n  const [author, setAuthor] = useState(\"\");\n  const [quoteArr, setquoteArr] = useState([]);\n  const fetchQuotes = async () => {\n    let quoteArr = [];\n    try {\n      const data = await axios.get(\"https://type.fit/api/quotes\");\n      console.log(data);\n      setquoteArr(data.data);\n    } catch (error) {\n      console.log(error);\n    }\n    try {\n      setQuote(quoteArr.text);\n      setAuthor(quoteArr.author);\n    } catch (error) {\n      console.log(error);\n    }\n  };\n  useEffect(() => {\n    fetchQuotes();\n  }, []);\n  const getRandomQuote = () => {\n    // do rnandom quote logic \n  };\n\n  // console.log(quoteArr[10].text);\n  // const randomQuoteNum = Math.floor(Math.random() * 1643);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [\" \", /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: [/*#__PURE__*/_jsxDEV(FontAwesomeIcon, {\n          icon: faQuoteLeft\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 49,\n          columnNumber: 11\n        }, this), quoteArr[randomQuoteNum]]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 48,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"- \", quoteArr[randomQuoteNum].author]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 52,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true)]\n  }, void 0, true);\n}\n\n//? Quote API Below\n/*\n\nfetch(\"https://type.fit/api/quotes\")\n  .then(function(response) {\n    return response.json();\n  })\n  .then(function(data) {\n    console.log(data);\n  });\n\n*/\n\n// {/* {quoteArr.forEach((quote) => (\n\n// ))} */\n// }\n/*\n\neverytime I click the submit button 2 things happen\n1: Generate new quotes\n2: Generate new colors\n\nif(prevIndex < index) {\n  *display next colors from arr*\n  counter++\n} else if (index > 9) {\n  *display initial color*\n  counter - 10\n}\n\n*/\n_s(Text, \"9o7pjlQxAiM/qmBF8tZGBpj21uA=\");\n_c = Text;\nvar _c;\n$RefreshReg$(_c, \"Text\");","map":{"version":3,"names":["tachyons","FontAwesomeIcon","faQuoteLeft","axios","useEffect","useState","jsxDEV","_jsxDEV","Fragment","_Fragment","randomQuoteNum","Math","floor","random","Text","_s","quote","setQuote","author","setAuthor","quoteArr","setquoteArr","fetchQuotes","data","get","console","log","error","text","getRandomQuote","children","icon","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/cassiusreynolds/Desktop/coding/freecodecamp/react/randomQuoteGen/random-quote-gen/src/Text.js"],"sourcesContent":["import tachyons from \"tachyons\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { faQuoteLeft } from \"@fortawesome/free-solid-svg-icons\";\nimport axios from \"axios\";\nimport { useEffect, useState } from \"react\";\n\n// exports\nexport const randomQuoteNum = Math.floor(Math.random() * 1643);\n\n\nexport default function Text() {\n  const [quote, setQuote] = useState(\"\");\n  const [author, setAuthor] = useState(\"\");\n  const [quoteArr, setquoteArr] = useState([]);\n\n  const fetchQuotes = async () => {\n    let quoteArr = [];\n    try {\n      const data = await axios.get(\"https://type.fit/api/quotes\");\n      console.log(data);\n      setquoteArr(data.data);\n    } catch (error) {\n      console.log(error);\n    }\n\n    try {\n      setQuote(quoteArr.text);\n      setAuthor(quoteArr.author);\n    } catch (error) {\n      console.log(error);\n    }\n  };\n\n  useEffect(() => {\n    fetchQuotes();\n  }, []);\n\n  const getRandomQuote = () => {\n    // do rnandom quote logic \n  }\n\n  // console.log(quoteArr[10].text);\n// const randomQuoteNum = Math.floor(Math.random() * 1643);\n  return (\n    <>\n      {\" \"}\n      <>\n        <h2>\n          <FontAwesomeIcon icon={faQuoteLeft} />\n          {quoteArr[randomQuoteNum]}\n        </h2>\n        <p>- {quoteArr[randomQuoteNum].author}</p>\n      </>\n    </>\n  );\n}\n\n//? Quote API Below\n/*\n\nfetch(\"https://type.fit/api/quotes\")\n  .then(function(response) {\n    return response.json();\n  })\n  .then(function(data) {\n    console.log(data);\n  });\n\n*/\n\n// {/* {quoteArr.forEach((quote) => (\n       \n      // ))} */\n    // }\n/*\n\neverytime I click the submit button 2 things happen\n1: Generate new quotes\n2: Generate new colors\n\nif(prevIndex < index) {\n  *display next colors from arr*\n  counter++\n} else if (index > 9) {\n  *display initial color*\n  counter - 10\n}\n\n*/\n"],"mappings":";;AAAA,OAAOA,QAAQ,MAAM,UAAU;AAC/B,SAASC,eAAe,QAAQ,gCAAgC;AAChE,SAASC,WAAW,QAAQ,mCAAmC;AAC/D,OAAOC,KAAK,MAAM,OAAO;AACzB,SAASC,SAAS,EAAEC,QAAQ,QAAQ,OAAO;;AAE3C;AAAA,SAAAC,MAAA,IAAAC,OAAA;AAAA,SAAAC,QAAA,IAAAC,SAAA;AACA,OAAO,MAAMC,cAAc,GAAGC,IAAI,CAACC,KAAK,CAACD,IAAI,CAACE,MAAM,CAAC,CAAC,GAAG,IAAI,CAAC;AAG9D,eAAe,SAASC,IAAIA,CAAA,EAAG;EAAAC,EAAA;EAC7B,MAAM,CAACC,KAAK,EAAEC,QAAQ,CAAC,GAAGZ,QAAQ,CAAC,EAAE,CAAC;EACtC,MAAM,CAACa,MAAM,EAAEC,SAAS,CAAC,GAAGd,QAAQ,CAAC,EAAE,CAAC;EACxC,MAAM,CAACe,QAAQ,EAAEC,WAAW,CAAC,GAAGhB,QAAQ,CAAC,EAAE,CAAC;EAE5C,MAAMiB,WAAW,GAAG,MAAAA,CAAA,KAAY;IAC9B,IAAIF,QAAQ,GAAG,EAAE;IACjB,IAAI;MACF,MAAMG,IAAI,GAAG,MAAMpB,KAAK,CAACqB,GAAG,CAAC,6BAA6B,CAAC;MAC3DC,OAAO,CAACC,GAAG,CAACH,IAAI,CAAC;MACjBF,WAAW,CAACE,IAAI,CAACA,IAAI,CAAC;IACxB,CAAC,CAAC,OAAOI,KAAK,EAAE;MACdF,OAAO,CAACC,GAAG,CAACC,KAAK,CAAC;IACpB;IAEA,IAAI;MACFV,QAAQ,CAACG,QAAQ,CAACQ,IAAI,CAAC;MACvBT,SAAS,CAACC,QAAQ,CAACF,MAAM,CAAC;IAC5B,CAAC,CAAC,OAAOS,KAAK,EAAE;MACdF,OAAO,CAACC,GAAG,CAACC,KAAK,CAAC;IACpB;EACF,CAAC;EAEDvB,SAAS,CAAC,MAAM;IACdkB,WAAW,CAAC,CAAC;EACf,CAAC,EAAE,EAAE,CAAC;EAEN,MAAMO,cAAc,GAAGA,CAAA,KAAM;IAC3B;EAAA,CACD;;EAED;EACF;EACE,oBACEtB,OAAA,CAAAE,SAAA;IAAAqB,QAAA,GACG,GAAG,eACJvB,OAAA,CAAAE,SAAA;MAAAqB,QAAA,gBACEvB,OAAA;QAAAuB,QAAA,gBACEvB,OAAA,CAACN,eAAe;UAAC8B,IAAI,EAAE7B;QAAY;UAAA8B,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAE,CAAC,EACrCf,QAAQ,CAACV,cAAc,CAAC;MAAA;QAAAsB,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACvB,CAAC,eACL5B,OAAA;QAAAuB,QAAA,GAAG,IAAE,EAACV,QAAQ,CAACV,cAAc,CAAC,CAACQ,MAAM;MAAA;QAAAc,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAI,CAAC;IAAA,eAC1C,CAAC;EAAA,eACH,CAAC;AAEP;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEM;AACF;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAdApB,EAAA,CAhEwBD,IAAI;AAAAsB,EAAA,GAAJtB,IAAI;AAAA,IAAAsB,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}