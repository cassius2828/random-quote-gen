{"ast":null,"code":"import tachyons from \"tachyons\";\nimport { CardInfo } from \"./CardInfo\";\nimport \"../../index.css\";\nimport { colors } from \"../MainPage/Buttons\";\nimport { useSelector } from \"react-redux\";\nimport { useState } from \"react\";\n// import { data } from \"./TestAPI\";\nimport { shorterQuotes } from \"../../filteredQuotes\";\nimport InfiniteScroll from \"react-infinite-scroll-component\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { faArrowAltCircleUp } from \"@fortawesome/free-solid-svg-icons\";\n\n// export const SearchQuotes = () => {\n//   const newColorState = useSelector((state) => state.color);\n//   const [search, setSearch] = useState(\"\");\n//   const [filteredResults, setFilteredResults] = useState([]);\n//   const searchQuotes = (searchValue) => {\n//     setSearch(searchValue);\n//     if (search !== \"\") {\n//       const filteredData = shorterQuotes.filter((item) => {\n//         return Object.values(item)\n//           .join(\" \")\n//           .toLocaleLowerCase()\n//           .includes(search.toLocaleLowerCase());\n//       });\n//       setFilteredResults(filteredData);\n//     } else {\n//       setFilteredResults(shorterQuotes);\n//     }\n//   };\n\n//   return (\n//     <div className=\"search-container tc\">\n//       <input\n//         style={{\n//           color: colors[newColorState],\n//           border: `solid 4px ${colors[newColorState]}`,\n//         }}\n//         onChange={(e) => searchQuotes(e.target.value)}\n//         className=\"tc f6 dim ba bw2 ph3 pv2 mb2 dib\"\n//         type=\"search\"\n//         placeholder=\"search for quotes...\"\n//       />\n//       {/* break */}\n//       <InfiniteScroll\n//         className=\"infinite-scroll mb4\"\n//         dataLength={shorterQuotes.length}\n//         next={shorterQuotes}\n//         hasMore={true} // Replace with a condition based on your data source\n//         height={620}\n//       >\n//         <div id=\"back-to-top\"></div>\n//         <div className=\"card-containers\">\n//           {search.length > 0\n//             ? filteredResults.map((item, index) => {\n//                 return <CardInfo index={index + 1} key={item._id} quote={item.content} author={item.author} />;\n//               })\n//             : shorterQuotes.map((item, index) => {\n//                 return <CardInfo index={index + 1} key={item._id} quote={item.content} author={item.author} />;\n//               })}\n//         </div>\n//        {/* //!   will style this later */}\n//         <a href=\"#back-to-top\">\n//           <FontAwesomeIcon className=\"back-to-top\" icon={faArrowAltCircleUp} />\n//         </a>\n//       </InfiniteScroll>\n//       <footer\n//         style={{\n//           color: `${colors[newColorState]}`,\n//           transition: \"all .5s ease-in-out\",\n//         }}\n//         className=\"tc ma5\"\n//       >\n//         Developed By{\" \"}\n//         <a\n//           style={{\n//             color: `${colors[newColorState]}`,\n//             transition: \"all .5s ease-in-out\",\n//           }}\n//           href=\"https://github.com/cassius2828\"\n//           target=\"_blank\"\n//           rel=\"noreferrer\"\n//         >\n//           Cassius Reynolds\n//         </a>\n//       </footer>\n//     </div>\n//   );\n// };\n\n//* Will add <Link> to navigate card info, will bring us back to main screen with that quote selected\n//* in order to do this, that change will have to change the state as well. Action creators are the only way to\n//*change state in such a way right? So I will need to look into that\n//? OR, I could make it to where when a card is clicked all other cards disappear and this one grows??\n//?which ever concept is more feasable I will pursue\n\n/*\nThings to do\n1: Add dropdown filter by category\n2: make cards clickable and take you to the main screen with the state updated to that card number\n3: style buttons in search section\n4: style the error report when you try to hit next or previous quote on first load\n5: make site fully resposnive \n5b: take away duplicates and clean number code to match the new length of the data\n6: put it up on github\n7: make a copy and pass the necessary tests for FCC\n\n\n\n*/","map":{"version":3,"names":["tachyons","CardInfo","colors","useSelector","useState","shorterQuotes","InfiniteScroll","FontAwesomeIcon","faArrowAltCircleUp"],"sources":["/Users/cassiusreynolds/Desktop/coding/freecodecamp/react/randomQuoteGen/random-quote-gen/src/components/SearchPage/SearchQuotes.js"],"sourcesContent":["import tachyons from \"tachyons\";\nimport { CardInfo } from \"./CardInfo\";\nimport \"../../index.css\";\nimport { colors } from \"../MainPage/Buttons\";\nimport { useSelector } from \"react-redux\";\nimport { useState } from \"react\";\n// import { data } from \"./TestAPI\";\nimport { shorterQuotes } from \"../../filteredQuotes\";\nimport InfiniteScroll from \"react-infinite-scroll-component\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { faArrowAltCircleUp } from \"@fortawesome/free-solid-svg-icons\";\n\n// export const SearchQuotes = () => {\n//   const newColorState = useSelector((state) => state.color);\n//   const [search, setSearch] = useState(\"\");\n//   const [filteredResults, setFilteredResults] = useState([]);\n//   const searchQuotes = (searchValue) => {\n//     setSearch(searchValue);\n//     if (search !== \"\") {\n//       const filteredData = shorterQuotes.filter((item) => {\n//         return Object.values(item)\n//           .join(\" \")\n//           .toLocaleLowerCase()\n//           .includes(search.toLocaleLowerCase());\n//       });\n//       setFilteredResults(filteredData);\n//     } else {\n//       setFilteredResults(shorterQuotes);\n//     }\n//   };\n\n//   return (\n//     <div className=\"search-container tc\">\n//       <input\n//         style={{\n//           color: colors[newColorState],\n//           border: `solid 4px ${colors[newColorState]}`,\n//         }}\n//         onChange={(e) => searchQuotes(e.target.value)}\n//         className=\"tc f6 dim ba bw2 ph3 pv2 mb2 dib\"\n//         type=\"search\"\n//         placeholder=\"search for quotes...\"\n//       />\n//       {/* break */}\n//       <InfiniteScroll\n//         className=\"infinite-scroll mb4\"\n//         dataLength={shorterQuotes.length}\n//         next={shorterQuotes}\n//         hasMore={true} // Replace with a condition based on your data source\n//         height={620}\n//       >\n//         <div id=\"back-to-top\"></div>\n//         <div className=\"card-containers\">\n//           {search.length > 0\n//             ? filteredResults.map((item, index) => {\n//                 return <CardInfo index={index + 1} key={item._id} quote={item.content} author={item.author} />;\n//               })\n//             : shorterQuotes.map((item, index) => {\n//                 return <CardInfo index={index + 1} key={item._id} quote={item.content} author={item.author} />;\n//               })}\n//         </div>\n//        {/* //!   will style this later */}\n//         <a href=\"#back-to-top\">\n//           <FontAwesomeIcon className=\"back-to-top\" icon={faArrowAltCircleUp} />\n//         </a>\n//       </InfiniteScroll>\n//       <footer\n//         style={{\n//           color: `${colors[newColorState]}`,\n//           transition: \"all .5s ease-in-out\",\n//         }}\n//         className=\"tc ma5\"\n//       >\n//         Developed By{\" \"}\n//         <a\n//           style={{\n//             color: `${colors[newColorState]}`,\n//             transition: \"all .5s ease-in-out\",\n//           }}\n//           href=\"https://github.com/cassius2828\"\n//           target=\"_blank\"\n//           rel=\"noreferrer\"\n//         >\n//           Cassius Reynolds\n//         </a>\n//       </footer>\n//     </div>\n//   );\n// };\n\n//* Will add <Link> to navigate card info, will bring us back to main screen with that quote selected\n//* in order to do this, that change will have to change the state as well. Action creators are the only way to\n//*change state in such a way right? So I will need to look into that\n//? OR, I could make it to where when a card is clicked all other cards disappear and this one grows??\n//?which ever concept is more feasable I will pursue\n\n\n/*\nThings to do\n1: Add dropdown filter by category\n2: make cards clickable and take you to the main screen with the state updated to that card number\n3: style buttons in search section\n4: style the error report when you try to hit next or previous quote on first load\n5: make site fully resposnive \n5b: take away duplicates and clean number code to match the new length of the data\n6: put it up on github\n7: make a copy and pass the necessary tests for FCC\n\n\n\n*/"],"mappings":"AAAA,OAAOA,QAAQ,MAAM,UAAU;AAC/B,SAASC,QAAQ,QAAQ,YAAY;AACrC,OAAO,iBAAiB;AACxB,SAASC,MAAM,QAAQ,qBAAqB;AAC5C,SAASC,WAAW,QAAQ,aAAa;AACzC,SAASC,QAAQ,QAAQ,OAAO;AAChC;AACA,SAASC,aAAa,QAAQ,sBAAsB;AACpD,OAAOC,cAAc,MAAM,iCAAiC;AAC5D,SAASC,eAAe,QAAQ,gCAAgC;AAChE,SAASC,kBAAkB,QAAQ,mCAAmC;;AAEtE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA"},"metadata":{},"sourceType":"module","externalDependencies":[]}