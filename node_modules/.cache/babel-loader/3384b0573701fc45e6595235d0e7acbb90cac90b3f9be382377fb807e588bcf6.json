{"ast":null,"code":"var _jsxFileName = \"/Users/cassiusreynolds/Desktop/coding/freecodecamp/react/certificationProjects/randomQuoteGen/random-quote-gen/src/components/SearchPage/CardInfo.js\",\n  _s = $RefreshSig$();\nimport tachyons from \"tachyons\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { faQuoteLeft } from \"@fortawesome/free-solid-svg-icons\";\nimport \"../../index.css\";\nimport { useSelector } from \"react-redux\";\nimport { useState } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nexport const CardInfo = ({\n  quote = \"lorem sample text that is what this is you already know it boi\",\n  author = \"lorem fait\",\n  index = 'unknown'\n}) => {\n  _s();\n  const [expand, setExpand] = useState(false);\n  // I did not export bc of getter vs setter error when using logic for changing array colors in dark mode\n  let colors = [\"#d61a1a\", \"#21d214\", \"#FF6633\", \"#0ed6d3\", \"#ba9a2f\", \"#3369ff\", \"#60514c\", \"#32724f\", \"#c91ead\", \"#d82b6b\", \"#3029fb\", \"#657077\", \"#99de3f\", \"#b433ff\", \"#590e0e\", \"#131142\"];\n  let colors2 = [\"#d61a1a\", \"#21d214\", \"#FF6633\", \"#0ed6d3\", \"#ba9a2f\", \"#3369ff\", \"#c9a89d\", \"#4eba7f\", \"#c91ead\", \"#d82b6b\", \"#9894f7\", \"#98aab5\", \"#99de3f\", \"#9d48cf\", \"#ff94b0\", \"#FFF\"];\n  //////////////////////////////////////////////////\n\n  // useSelector\n  const lightMode = useSelector(state => state.light);\n\n  // base set up for light mode vs dark mode toggle\n  lightMode ? colors = colors : colors = colors2;\n  const newColorState = useSelector(state => state.color);\n\n  // toggle expand handler\n  const handleExpand = () => {\n    setExpand(!expand);\n  };\n  //////////////////////////////////////////////////\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      onClick: handleExpand,\n      style: {\n        color: colors[newColorState],\n        border: `solid 2px ${colors[newColorState]}`\n      },\n      className: \"quote-info-box tc mt4\",\n      id: \"quote-info-box\",\n      children: [/*#__PURE__*/_jsxDEV(\"h5\", {\n        id: \"text\",\n        style: {\n          color: colors[newColorState],\n          transition: \"all .5s ease-in-out\"\n        },\n        className: \"pa3 pt2\",\n        children: [/*#__PURE__*/_jsxDEV(FontAwesomeIcon, {\n          style: {\n            color: colors[newColorState],\n            transition: \"all .5s ease-in-out\"\n          },\n          icon: faQuoteLeft\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 92,\n          columnNumber: 9\n        }, this), quote]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 84,\n        columnNumber: 7\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        style: {\n          color: colors[newColorState],\n          transition: \"all .5s ease-in-out\"\n        },\n        children: [\"- \", author]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 101,\n        columnNumber: 7\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        style: {\n          color: colors[newColorState],\n          transition: \"all .5s ease-in-out\"\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 109,\n        columnNumber: 7\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 75,\n      columnNumber: 5\n    }, this)\n  }, void 0, false);\n};\n\n// lorem sample text that is what this is you already know it boi\n// lorem fait\n\n/*\n\n\n\n\nconst [clickState, setClickState] = useState(0);\n\n<Link \npath='/',\nonClick={() => setClickState(props.index)}\n\n*/\n_s(CardInfo, \"gowhs2uRaHSi6HuDtRHidCqkNGI=\", false, function () {\n  return [useSelector, useSelector];\n});\n_c = CardInfo;\nvar _c;\n$RefreshReg$(_c, \"CardInfo\");","map":{"version":3,"names":["tachyons","FontAwesomeIcon","faQuoteLeft","useSelector","useState","jsxDEV","_jsxDEV","Fragment","_Fragment","CardInfo","quote","author","index","_s","expand","setExpand","colors","colors2","lightMode","state","light","newColorState","color","handleExpand","children","onClick","style","border","className","id","transition","icon","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/cassiusreynolds/Desktop/coding/freecodecamp/react/certificationProjects/randomQuoteGen/random-quote-gen/src/components/SearchPage/CardInfo.js"],"sourcesContent":["import tachyons from \"tachyons\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { faQuoteLeft } from \"@fortawesome/free-solid-svg-icons\";\nimport \"../../index.css\";\nimport { useSelector } from \"react-redux\";\nimport { useState } from \"react\";\n\n\n\n\nexport const CardInfo = ({\n  quote = \"lorem sample text that is what this is you already know it boi\",\n  author = \"lorem fait\",\n  index = 'unknown',\n  \n  \n}) => {\n  const [expand, setExpand] = useState(false);\n  // I did not export bc of getter vs setter error when using logic for changing array colors in dark mode\n  let colors = [\n    \"#d61a1a\",\n    \"#21d214\",\n    \"#FF6633\",\n    \"#0ed6d3\",\n    \"#ba9a2f\",\n    \"#3369ff\",\n    \"#60514c\",\n    \"#32724f\",\n    \"#c91ead\",\n    \"#d82b6b\",\n    \"#3029fb\",\n    \"#657077\",\n    \"#99de3f\",\n    \"#b433ff\",\n    \"#590e0e\",\n    \"#131142\",\n  ];\n  let colors2 = [\n    \"#d61a1a\",\n    \"#21d214\",\n    \"#FF6633\",\n    \"#0ed6d3\",\n    \"#ba9a2f\",\n    \"#3369ff\",\n    \"#c9a89d\",\n    \"#4eba7f\",\n    \"#c91ead\",\n    \"#d82b6b\",\n    \"#9894f7\",\n    \"#98aab5\",\n    \"#99de3f\",\n    \"#9d48cf\",\n    \"#ff94b0\",\n    \"#FFF\",\n  ];\n  //////////////////////////////////////////////////\n\n  // useSelector\n  const lightMode = useSelector((state) => state.light);\n\n  // base set up for light mode vs dark mode toggle\n  lightMode ? (colors = colors) : (colors = colors2);\n  const newColorState = useSelector((state) => state.color);\n\n  \n\n  // toggle expand handler\n  const handleExpand = () => {\n    setExpand(!expand);\n  };\n  //////////////////////////////////////////////////\n\n  return (\n    <>\n    <div\n      onClick={handleExpand}\n      style={{\n        color: colors[newColorState],\n        border: `solid 2px ${colors[newColorState]}`,\n      }}\n      className=\"quote-info-box tc mt4\"\n      id=\"quote-info-box\"\n    >\n      <h5\n        id=\"text\"\n        style={{\n          color: colors[newColorState],\n          transition: \"all .5s ease-in-out\",\n        }}\n        className=\"pa3 pt2\"\n      >\n        <FontAwesomeIcon\n          style={{\n            color: colors[newColorState],\n            transition: \"all .5s ease-in-out\",\n          }}\n          icon={faQuoteLeft}\n        />\n        {quote}\n      </h5>\n      <p\n        style={{\n          color: colors[newColorState],\n          transition: \"all .5s ease-in-out\",\n        }}\n      >\n        - {author}\n      </p>\n      <p\n        style={{\n          color: colors[newColorState],\n          transition: \"all .5s ease-in-out\",\n        }}\n      >\n        {/* Quote #{index} */}\n      </p>\n    </div>\n    </>\n  );\n};\n\n// lorem sample text that is what this is you already know it boi\n// lorem fait\n\n\n/*\n\n\n\n\nconst [clickState, setClickState] = useState(0);\n\n<Link \npath='/',\nonClick={() => setClickState(props.index)}\n\n*/"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}