{"ast":null,"code":"import tachyons from\"tachyons\";import{FontAwesomeIcon}from\"@fortawesome/react-fontawesome\";import{faQuoteLeft}from\"@fortawesome/free-solid-svg-icons\";// import axios from \"axios\";\n// import { useEffect, useState } from \"react\";\nimport{useSelector}from\"react-redux/es/hooks/useSelector\";import{shorterQuotes}from\"../../filteredQuotes\";// exports\nimport{jsx as _jsx}from\"react/jsx-runtime\";import{jsxs as _jsxs}from\"react/jsx-runtime\";import{Fragment as _Fragment}from\"react/jsx-runtime\";var Text=function Text(){//! no longer using API bc the site is no longer active, instead I am using my\n//! own data I compiled from outside sources\n// const [quoteArr, setquoteArr] = useState([]);\n// const fetchQuotes = async () => {\n//   try {\n//     const response = await axios.get(\"https://api.api-ninjas.com/v1/quotes\", {\n//       headers: {\n//         \"X-Api-Key\": 'AypqPfFMnmLnw8iuCXM3Lw==qaDeh3llghS570Fh',\n//       },\n//     });\n//     setquoteArr(response.data);\n//     console.log(response)\n//   } catch (error) {\n//     console.log(error);\n//   }\n// };\n// useEffect(() => {\n//   fetchQuotes();\n// }, []);\nvar quoteArr=shorterQuotes;// I did not export bc of getter vs setter error when using logic for changing array colors in dark mode\nvar colors=[\"#d61a1a\",\"#21d214\",\"#FF6633\",\"#0ed6d3\",\"#ba9a2f\",\"#3369ff\",\"#60514c\",\"#32724f\",\"#c91ead\",\"#d82b6b\",\"#3029fb\",\"#657077\",\"#99de3f\",\"#b433ff\",\"#590e0e\",\"#131142\"];var colors2=[\"#d61a1a\",\"#21d214\",\"#FF6633\",\"#0ed6d3\",\"#ba9a2f\",\"#3369ff\",\"#c9a89d\",\"#4eba7f\",\"#c91ead\",\"#d82b6b\",\"#9894f7\",\"#98aab5\",\"#99de3f\",\"#9d48cf\",\"#ff94b0\",\"#FFF\"];// useSelectors\nvar lightMode=useSelector(function(state){return state.light;});var newQuoteState=useSelector(function(state){return state.quote;});var newColorState=useSelector(function(state){return state.color;});// base set up for light mode vs dark mode toggle\nlightMode?colors=colors:colors=colors2;return/*#__PURE__*/_jsxs(_Fragment,{children:[\" \",/*#__PURE__*/_jsxs(\"div\",{id:\"quote-box\",children:[/*#__PURE__*/_jsxs(\"h2\",{className:\"mb3\",id:\"text\",style:{color:colors[newColorState],transition:\"all .5s ease-in-out\"},children:[/*#__PURE__*/_jsx(FontAwesomeIcon,{icon:faQuoteLeft}),quoteArr[312]?\" \"+quoteArr[newQuoteState].content:\" *our api is having difficulties*\"]}),/*#__PURE__*/_jsxs(\"p\",{className:\"mb3\",id:\"author\",style:{color:colors[newColorState],transition:\"all .5s ease-in-out\"},children:[\"-\",\" \",quoteArr[312]?quoteArr[newQuoteState].author?quoteArr[newQuoteState].author:\"anonymous\":\" :(\"]})]})]});};export default Text;","map":{"version":3,"names":["tachyons","FontAwesomeIcon","faQuoteLeft","useSelector","shorterQuotes","jsx","_jsx","jsxs","_jsxs","Fragment","_Fragment","Text","quoteArr","colors","colors2","lightMode","state","light","newQuoteState","quote","newColorState","color","children","id","className","style","transition","icon","content","author"],"sources":["/Users/cassiusreynolds/Desktop/coding/freecodecamp/react/certificationProjects/randomQuoteGen/random-quote-gen/src/components/MainPage/Text.js"],"sourcesContent":["import tachyons from \"tachyons\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { faQuoteLeft } from \"@fortawesome/free-solid-svg-icons\";\n// import axios from \"axios\";\n// import { useEffect, useState } from \"react\";\nimport { useSelector } from \"react-redux/es/hooks/useSelector\";\nimport { shorterQuotes } from \"../../filteredQuotes\";\n\n// exports\n\nconst Text = () => {\n  //! no longer using API bc the site is no longer active, instead I am using my\n  //! own data I compiled from outside sources\n  // const [quoteArr, setquoteArr] = useState([]);\n\n  // const fetchQuotes = async () => {\n  //   try {\n  //     const response = await axios.get(\"https://api.api-ninjas.com/v1/quotes\", {\n  //       headers: {\n  //         \"X-Api-Key\": 'AypqPfFMnmLnw8iuCXM3Lw==qaDeh3llghS570Fh',\n  //       },\n  //     });\n\n  //     setquoteArr(response.data);\n  //     console.log(response)\n  //   } catch (error) {\n  //     console.log(error);\n  //   }\n  // };\n\n  // useEffect(() => {\n  //   fetchQuotes();\n  // }, []);\n\n  const quoteArr = shorterQuotes;\n  // I did not export bc of getter vs setter error when using logic for changing array colors in dark mode\n  let colors = [\n    \"#d61a1a\",\n    \"#21d214\",\n    \"#FF6633\",\n    \"#0ed6d3\",\n    \"#ba9a2f\",\n    \"#3369ff\",\n    \"#60514c\",\n    \"#32724f\",\n    \"#c91ead\",\n    \"#d82b6b\",\n    \"#3029fb\",\n    \"#657077\",\n    \"#99de3f\",\n    \"#b433ff\",\n    \"#590e0e\",\n    \"#131142\",\n  ];\n  let colors2 = [\n    \"#d61a1a\",\n    \"#21d214\",\n    \"#FF6633\",\n    \"#0ed6d3\",\n    \"#ba9a2f\",\n    \"#3369ff\",\n    \"#c9a89d\",\n    \"#4eba7f\",\n    \"#c91ead\",\n    \"#d82b6b\",\n    \"#9894f7\",\n    \"#98aab5\",\n    \"#99de3f\",\n    \"#9d48cf\",\n    \"#ff94b0\",\n    \"#FFF\",\n  ];\n\n  // useSelectors\n  const lightMode = useSelector((state) => state.light);\n  const newQuoteState = useSelector((state) => state.quote);\n  const newColorState = useSelector((state) => state.color);\n  // base set up for light mode vs dark mode toggle\n\n  lightMode ? (colors = colors) : (colors = colors2);\n  return (\n    <>\n      {\" \"}\n      <div id=\"quote-box\">\n        <h2\n          className=\"mb3\"\n          id=\"text\"\n          style={{\n            color: colors[newColorState],\n            transition: \"all .5s ease-in-out\",\n          }}\n        >\n          <FontAwesomeIcon icon={faQuoteLeft} />\n          {quoteArr[312]\n            ? \" \" + quoteArr[newQuoteState].content\n            : \" *our api is having difficulties*\"}\n        </h2>\n        <p\n          className=\"mb3\"\n          id=\"author\"\n          style={{\n            color: colors[newColorState],\n            transition: \"all .5s ease-in-out\",\n          }}\n        >\n          -{\" \"}\n          {quoteArr[312]\n            ? quoteArr[newQuoteState].author\n              ? quoteArr[newQuoteState].author\n              : \"anonymous\"\n            : \" :(\"}\n        </p>\n      </div>\n    </>\n  );\n};\n\nexport default Text;\n"],"mappings":"AAAA,MAAO,CAAAA,QAAQ,KAAM,UAAU,CAC/B,OAASC,eAAe,KAAQ,gCAAgC,CAChE,OAASC,WAAW,KAAQ,mCAAmC,CAC/D;AACA;AACA,OAASC,WAAW,KAAQ,kCAAkC,CAC9D,OAASC,aAAa,KAAQ,sBAAsB,CAEpD;AAAA,OAAAC,GAAA,IAAAC,IAAA,gCAAAC,IAAA,IAAAC,KAAA,gCAAAC,QAAA,IAAAC,SAAA,yBAEA,GAAM,CAAAC,IAAI,CAAG,QAAP,CAAAA,IAAIA,CAAA,CAAS,CACjB;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA,GAAM,CAAAC,QAAQ,CAAGR,aAAa,CAC9B;AACA,GAAI,CAAAS,MAAM,CAAG,CACX,SAAS,CACT,SAAS,CACT,SAAS,CACT,SAAS,CACT,SAAS,CACT,SAAS,CACT,SAAS,CACT,SAAS,CACT,SAAS,CACT,SAAS,CACT,SAAS,CACT,SAAS,CACT,SAAS,CACT,SAAS,CACT,SAAS,CACT,SAAS,CACV,CACD,GAAI,CAAAC,OAAO,CAAG,CACZ,SAAS,CACT,SAAS,CACT,SAAS,CACT,SAAS,CACT,SAAS,CACT,SAAS,CACT,SAAS,CACT,SAAS,CACT,SAAS,CACT,SAAS,CACT,SAAS,CACT,SAAS,CACT,SAAS,CACT,SAAS,CACT,SAAS,CACT,MAAM,CACP,CAED;AACA,GAAM,CAAAC,SAAS,CAAGZ,WAAW,CAAC,SAACa,KAAK,QAAK,CAAAA,KAAK,CAACC,KAAK,GAAC,CACrD,GAAM,CAAAC,aAAa,CAAGf,WAAW,CAAC,SAACa,KAAK,QAAK,CAAAA,KAAK,CAACG,KAAK,GAAC,CACzD,GAAM,CAAAC,aAAa,CAAGjB,WAAW,CAAC,SAACa,KAAK,QAAK,CAAAA,KAAK,CAACK,KAAK,GAAC,CACzD;AAEAN,SAAS,CAAIF,MAAM,CAAGA,MAAM,CAAKA,MAAM,CAAGC,OAAQ,CAClD,mBACEN,KAAA,CAAAE,SAAA,EAAAY,QAAA,EACG,GAAG,cACJd,KAAA,QAAKe,EAAE,CAAC,WAAW,CAAAD,QAAA,eACjBd,KAAA,OACEgB,SAAS,CAAC,KAAK,CACfD,EAAE,CAAC,MAAM,CACTE,KAAK,CAAE,CACLJ,KAAK,CAAER,MAAM,CAACO,aAAa,CAAC,CAC5BM,UAAU,CAAE,qBACd,CAAE,CAAAJ,QAAA,eAEFhB,IAAA,CAACL,eAAe,EAAC0B,IAAI,CAAEzB,WAAY,CAAE,CAAC,CACrCU,QAAQ,CAAC,GAAG,CAAC,CACV,GAAG,CAAGA,QAAQ,CAACM,aAAa,CAAC,CAACU,OAAO,CACrC,mCAAmC,EACrC,CAAC,cACLpB,KAAA,MACEgB,SAAS,CAAC,KAAK,CACfD,EAAE,CAAC,QAAQ,CACXE,KAAK,CAAE,CACLJ,KAAK,CAAER,MAAM,CAACO,aAAa,CAAC,CAC5BM,UAAU,CAAE,qBACd,CAAE,CAAAJ,QAAA,EACH,GACE,CAAC,GAAG,CACJV,QAAQ,CAAC,GAAG,CAAC,CACVA,QAAQ,CAACM,aAAa,CAAC,CAACW,MAAM,CAC5BjB,QAAQ,CAACM,aAAa,CAAC,CAACW,MAAM,CAC9B,WAAW,CACb,KAAK,EACR,CAAC,EACD,CAAC,EACN,CAAC,CAEP,CAAC,CAED,cAAe,CAAAlB,IAAI"},"metadata":{},"sourceType":"module","externalDependencies":[]}