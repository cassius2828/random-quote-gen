{"ast":null,"code":"var _jsxFileName = \"/Users/cassiusreynolds/Desktop/coding/freecodecamp/react/randomQuoteGen/random-quote-gen/src/Text.js\",\n  _s = $RefreshSig$();\nimport tachyons from \"tachyons\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { faQuoteLeft } from \"@fortawesome/free-solid-svg-icons\";\nimport axios from \"axios\";\nimport { useEffect, useState } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function Text() {\n  _s();\n  const [quote, setQuote] = useState(\"\");\n  const [author, setAuthor] = useState(\"\");\n  const [quoteArr, setquoteArr] = useState([]);\n  const fetchQuotes = async () => {\n    let quoteArr = [];\n    try {\n      const data = await axios.get(\"https://type.fit/api/quotes\");\n      console.log(data);\n      setquoteArr(data.data);\n    } catch (error) {\n      console.log(error);\n    }\n    try {\n      setQuote(quoteArr.text);\n      setAuthor(quoteArr.author);\n    } catch (error) {\n      console.log(error);\n    }\n  };\n  useEffect(() => {\n    fetchQuotes();\n  }, []);\n  console.log(quoteArr[10]);\n\n  // return (\n  //   <>\n  //     {\" \"}\n  //     {quoteArr.forEach((quote) => (\n  //       <>\n  //         <h2>\n  //           <FontAwesomeIcon icon={faQuoteLeft} />\n  //           {quote}\n  //         </h2>\n  //         <p>- {author}</p>\n  //       </>\n  //     ))}\n  //   </>\n  // );\n\n  return /*#__PURE__*/_jsxDEV(\"h1\", {\n    children: quoteArr[10].text\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 52,\n    columnNumber: 10\n  }, this);\n}\n\n//? Quote API Below\n/*\n\nfetch(\"https://type.fit/api/quotes\")\n  .then(function(response) {\n    return response.json();\n  })\n  .then(function(data) {\n    console.log(data);\n  });\n\n*/\n\n/*\n\neverytime I click the submit button 2 things happen\n1: Generate new quotes\n2: Generate new colors\n\nif(prevIndex < index) {\n  *display next colors from arr*\n  counter++\n} else if (index > 9) {\n  *display initial color*\n  counter - 10\n}\n\n*/\n_s(Text, \"9o7pjlQxAiM/qmBF8tZGBpj21uA=\");\n_c = Text;\nvar _c;\n$RefreshReg$(_c, \"Text\");","map":{"version":3,"names":["tachyons","FontAwesomeIcon","faQuoteLeft","axios","useEffect","useState","jsxDEV","_jsxDEV","Text","_s","quote","setQuote","author","setAuthor","quoteArr","setquoteArr","fetchQuotes","data","get","console","log","error","text","children","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/cassiusreynolds/Desktop/coding/freecodecamp/react/randomQuoteGen/random-quote-gen/src/Text.js"],"sourcesContent":["import tachyons from \"tachyons\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { faQuoteLeft } from \"@fortawesome/free-solid-svg-icons\";\nimport axios from \"axios\";\nimport { useEffect, useState } from \"react\";\n\nexport default function Text() {\n  const [quote, setQuote] = useState(\"\");\n  const [author, setAuthor] = useState(\"\");\n  const [quoteArr, setquoteArr] = useState([]);\n\n  const fetchQuotes = async () => {\n    let quoteArr = [];\n    try {\n      const data = await axios.get(\"https://type.fit/api/quotes\");\n      console.log(data);\n      setquoteArr(data.data);\n    } catch (error) {\n      console.log(error);\n    }\n\n    try {\n      setQuote(quoteArr.text);\n      setAuthor(quoteArr.author);\n    } catch (error) {\n      console.log(error);\n    }\n  };\n\n  useEffect(() => {\n    fetchQuotes();\n  }, []);\n\n\n  console.log(quoteArr[10]);\n\n  // return (\n  //   <>\n  //     {\" \"}\n  //     {quoteArr.forEach((quote) => (\n  //       <>\n  //         <h2>\n  //           <FontAwesomeIcon icon={faQuoteLeft} />\n  //           {quote}\n  //         </h2>\n  //         <p>- {author}</p>\n  //       </>\n  //     ))}\n  //   </>\n  // );\n\n  return <h1>{quoteArr[10].text}</h1>;\n}\n\n//? Quote API Below\n/*\n\nfetch(\"https://type.fit/api/quotes\")\n  .then(function(response) {\n    return response.json();\n  })\n  .then(function(data) {\n    console.log(data);\n  });\n\n*/\n\n/*\n\neverytime I click the submit button 2 things happen\n1: Generate new quotes\n2: Generate new colors\n\nif(prevIndex < index) {\n  *display next colors from arr*\n  counter++\n} else if (index > 9) {\n  *display initial color*\n  counter - 10\n}\n\n*/\n"],"mappings":";;AAAA,OAAOA,QAAQ,MAAM,UAAU;AAC/B,SAASC,eAAe,QAAQ,gCAAgC;AAChE,SAASC,WAAW,QAAQ,mCAAmC;AAC/D,OAAOC,KAAK,MAAM,OAAO;AACzB,SAASC,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE5C,eAAe,SAASC,IAAIA,CAAA,EAAG;EAAAC,EAAA;EAC7B,MAAM,CAACC,KAAK,EAAEC,QAAQ,CAAC,GAAGN,QAAQ,CAAC,EAAE,CAAC;EACtC,MAAM,CAACO,MAAM,EAAEC,SAAS,CAAC,GAAGR,QAAQ,CAAC,EAAE,CAAC;EACxC,MAAM,CAACS,QAAQ,EAAEC,WAAW,CAAC,GAAGV,QAAQ,CAAC,EAAE,CAAC;EAE5C,MAAMW,WAAW,GAAG,MAAAA,CAAA,KAAY;IAC9B,IAAIF,QAAQ,GAAG,EAAE;IACjB,IAAI;MACF,MAAMG,IAAI,GAAG,MAAMd,KAAK,CAACe,GAAG,CAAC,6BAA6B,CAAC;MAC3DC,OAAO,CAACC,GAAG,CAACH,IAAI,CAAC;MACjBF,WAAW,CAACE,IAAI,CAACA,IAAI,CAAC;IACxB,CAAC,CAAC,OAAOI,KAAK,EAAE;MACdF,OAAO,CAACC,GAAG,CAACC,KAAK,CAAC;IACpB;IAEA,IAAI;MACFV,QAAQ,CAACG,QAAQ,CAACQ,IAAI,CAAC;MACvBT,SAAS,CAACC,QAAQ,CAACF,MAAM,CAAC;IAC5B,CAAC,CAAC,OAAOS,KAAK,EAAE;MACdF,OAAO,CAACC,GAAG,CAACC,KAAK,CAAC;IACpB;EACF,CAAC;EAEDjB,SAAS,CAAC,MAAM;IACdY,WAAW,CAAC,CAAC;EACf,CAAC,EAAE,EAAE,CAAC;EAGNG,OAAO,CAACC,GAAG,CAACN,QAAQ,CAAC,EAAE,CAAC,CAAC;;EAEzB;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;;EAEA,oBAAOP,OAAA;IAAAgB,QAAA,EAAKT,QAAQ,CAAC,EAAE,CAAC,CAACQ;EAAI;IAAAE,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAAK,CAAC;AACrC;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAdAlB,EAAA,CA7DwBD,IAAI;AAAAoB,EAAA,GAAJpB,IAAI;AAAA,IAAAoB,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}