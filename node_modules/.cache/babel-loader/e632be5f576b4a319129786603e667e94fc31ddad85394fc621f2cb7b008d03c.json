{"ast":null,"code":"var _jsxFileName = \"/Users/cassiusreynolds/Desktop/coding/freecodecamp/react/randomQuoteGen/random-quote-gen/src/Text.js\",\n  _s = $RefreshSig$();\nimport tachyons from \"tachyons\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { faQuoteLeft } from \"@fortawesome/free-solid-svg-icons\";\nimport axios from \"axios\";\nimport { useEffect, useState } from \"react\";\nimport { useSelector } from \"react-redux/es/hooks/useSelector\";\n\n// exports\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nexport const randomQuoteNum = Math.floor(Math.random() * 1643);\nconst Text = () => {\n  _s();\n  const [quote, setQuote] = useState(\"\");\n  const [author, setAuthor] = useState(\"\");\n  const [quoteArr, setquoteArr] = useState([]);\n  const fetchQuotes = async () => {\n    let quoteArr = [];\n    try {\n      const data = await axios.get(\"https://type.fit/api/quotes\");\n      console.log(data + \" 1\");\n      // setquoteArr(data.data);\n      console.log(quoteArr + \" I am empty :) 2\");\n      console.log(data.data[0].text + \" 3\");\n    } catch (error) {\n      console.log(error);\n    }\n    try {\n      // setquoteArr(data.data);\n      console.log(quoteArr.text);\n      setQuote(quoteArr.text);\n      setAuthor(quoteArr.author);\n    } catch (error) {\n      console.log(error);\n    }\n  };\n  useEffect(() => {\n    fetchQuotes();\n  }, []);\n\n  // const getRandomQuote = () => {\n  //   // do rnandom quote logic\n  // };\n\n  // console.log(quoteArr[10].text);\n  // const randomQuoteNum = Math.floor(Math.random() * 1643);\n\n  const newQuoteState = useSelector(state => state.quote);\n  // console.log(quoteArr[0] + ' test');\n  console.log(quoteArr[0] + \" 4\");\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [\" \", /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: /*#__PURE__*/_jsxDEV(\"h2\", {\n        children: /*#__PURE__*/_jsxDEV(FontAwesomeIcon, {\n          icon: faQuoteLeft\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 58,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 57,\n        columnNumber: 9\n      }, this)\n    }, void 0, false)]\n  }, void 0, true);\n};\n_s(Text, \"YpswU52hIGIKVQcIFHPj4hZU24U=\", false, function () {\n  return [useSelector];\n});\n_c = Text;\nexport default Text;\n\n//? Quote API Below\n/*\n\nfetch(\"https://type.fit/api/quotes\")\n  .then(function(response) {\n    return response.json();\n  })\n  .then(function(data) {\n    console.log(data);\n  });\n\n*/\n\n// {/* {quoteArr.forEach((quote) => (\n\n// ))} */\n// }\n/*\n\neverytime I click the submit button 2 things happen\n1: Generate new quotes\n2: Generate new colors\n\nif(prevIndex < index) {\n  *display next colors from arr*\n  counter++\n} else if (index > 9) {\n  *display initial color*\n  counter - 10\n}\n\n*/\n\n//? I think the error is bc the part of the data arr I am trying to access either\n//? wont load, the number is not a number given in the array index, or something was\n//? done to affect the array / ability to access the array\n\n//* It claims the issue is on the Text component, but I am having a hard time figureing out\n//* what made it stop working when it worked fine earlier\n\n//? The first time I attempt to log the data it is not there and is undefined\n//? BUT later on it logs the completed data object twice\n//* I must find out why it runs later and avoid it being summoned without proper info in it\nvar _c;\n$RefreshReg$(_c, \"Text\");","map":{"version":3,"names":["tachyons","FontAwesomeIcon","faQuoteLeft","axios","useEffect","useState","useSelector","jsxDEV","_jsxDEV","Fragment","_Fragment","randomQuoteNum","Math","floor","random","Text","_s","quote","setQuote","author","setAuthor","quoteArr","setquoteArr","fetchQuotes","data","get","console","log","text","error","newQuoteState","state","children","icon","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/cassiusreynolds/Desktop/coding/freecodecamp/react/randomQuoteGen/random-quote-gen/src/Text.js"],"sourcesContent":["import tachyons from \"tachyons\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { faQuoteLeft } from \"@fortawesome/free-solid-svg-icons\";\nimport axios from \"axios\";\nimport { useEffect, useState } from \"react\";\nimport { useSelector } from \"react-redux/es/hooks/useSelector\";\n\n// exports\nexport const randomQuoteNum = Math.floor(Math.random() * 1643);\n\nconst Text = () => {\n  const [quote, setQuote] = useState(\"\");\n  const [author, setAuthor] = useState(\"\");\n  const [quoteArr, setquoteArr] = useState([]);\n\n  const fetchQuotes = async () => {\n    let quoteArr = [];\n    try {\n      const data = await axios.get(\"https://type.fit/api/quotes\");\n      console.log(data + \" 1\");\n      // setquoteArr(data.data);\n      console.log(quoteArr + \" I am empty :) 2\");\n      console.log(data.data[0].text + \" 3\");\n    } catch (error) {\n      console.log(error);\n    }\n\n    try {\n      // setquoteArr(data.data);\n      console.log(quoteArr.text )\n      setQuote(quoteArr.text);\n      setAuthor(quoteArr.author);\n    } catch (error) {\n      console.log(error);\n    }\n  };\n\n  useEffect(() => {\n    fetchQuotes();\n  }, []);\n\n  // const getRandomQuote = () => {\n  //   // do rnandom quote logic\n  // };\n\n  // console.log(quoteArr[10].text);\n  // const randomQuoteNum = Math.floor(Math.random() * 1643);\n\n  const newQuoteState = useSelector((state) => state.quote);\n  // console.log(quoteArr[0] + ' test');\n  console.log(quoteArr[0] + \" 4\");\n\n  return (\n    <>\n      {\" \"}\n      <>\n        <h2>\n          <FontAwesomeIcon icon={faQuoteLeft} />\n        </h2>\n        {/* <p>- {quoteArr[newQuoteState].author}</p> */}\n      </>\n    </>\n  );\n};\n\nexport default Text;\n\n//? Quote API Below\n/*\n\nfetch(\"https://type.fit/api/quotes\")\n  .then(function(response) {\n    return response.json();\n  })\n  .then(function(data) {\n    console.log(data);\n  });\n\n*/\n\n// {/* {quoteArr.forEach((quote) => (\n\n// ))} */\n// }\n/*\n\neverytime I click the submit button 2 things happen\n1: Generate new quotes\n2: Generate new colors\n\nif(prevIndex < index) {\n  *display next colors from arr*\n  counter++\n} else if (index > 9) {\n  *display initial color*\n  counter - 10\n}\n\n*/\n\n//? I think the error is bc the part of the data arr I am trying to access either\n//? wont load, the number is not a number given in the array index, or something was\n//? done to affect the array / ability to access the array\n\n//* It claims the issue is on the Text component, but I am having a hard time figureing out\n//* what made it stop working when it worked fine earlier\n\n//? The first time I attempt to log the data it is not there and is undefined\n//? BUT later on it logs the completed data object twice\n//* I must find out why it runs later and avoid it being summoned without proper info in it\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}